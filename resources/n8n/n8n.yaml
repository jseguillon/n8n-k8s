apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-data
  namespace: automation
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: automation
spec:
  replicas: 1
  selector:
    matchLabels: { app: n8n }
  template:
    metadata:
      labels: { app: n8n }
    spec:
      serviceAccountName: n8n-sa
      containers:
        - name: n8n
          image: myregistry.example.com/tools/n8n-kubectl-jq:1
          imagePullPolicy: IfNotPresent
          env:
            - name: N8N_HOST
              value: "n8n.example.com"
            - name: N8N_PROTOCOL
              value: "https"
            - name: N8N_PORT
              value: "5678"
            - name: WEBHOOK_URL
              value: "https://n8n.example.com/"
            # Optional: turn on basic auth to protect editor
            # - name: N8N_BASIC_AUTH_ACTIVE
            #   value: "true"
            # - name: N8N_BASIC_AUTH_USER
            #   valueFrom: {secretKeyRef: {name: n8n-auth, key: user}}
            # - name: N8N_BASIC_AUTH_PASSWORD
            #   valueFrom: {secretKeyRef: {name: n8n-auth, key: pass}}
          ports:
            - containerPort: 5678
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: n8n-data
---
apiVersion: v1
kind: Service
metadata:
  name: n8n
  namespace: automation
spec:
  selector: { app: n8n }
  ports:
    - name: http
      port: 80
      targetPort: 5678
---
# Optional: if you have an ingress controller + DNS/SSL ready
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n8n
  namespace: automation
  annotations:
    kubernetes.io/ingress.class: nginx
    # cert-manager:
    # cert-manager.io/cluster-issuer: letsencrypt
spec:
  rules:
    - host: n8n.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n8n
                port:
                  number: 80
  # tls:
  #   - hosts: ["n8n.example.com"]
  #     secretName: n8n-tls
